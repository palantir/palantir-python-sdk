palantir_aliases:
  - &always-run
    filters:
      branches:
        only: /.*/
      tags:
        only: /.*/

version: 2
jobs:
  py38-pandas1:
    docker:
      - image: cimg/python:3.8.16
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Generate _version.py
          command: /home/circleci/.pyenv/shims/python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py38-pandas1 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py38-pandas2:
    docker:
      - image: cimg/python:3.8.16
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py38-pandas2 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py39-pandas1:
    docker:
      - image: cimg/python:3.9.16
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py39-pandas1 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py39-pandas2:
    docker:
      - image: cimg/python:3.9.16
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py39-pandas2 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py310-pandas1:
    docker:
      - image: cimg/python:3.10.11
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py310-pandas1 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py310-pandas2:
    docker:
      - image: cimg/python:3.10.11
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py310-pandas2 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit


  py311-pandas1:
    docker:
      - image: cimg/python:3.11.3
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py311-pandas1 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  py311-pandas2:
    docker:
      - image: cimg/python:3.11.3
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e py311-pandas2 --recreate

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  pylint:
    docker:
      - image: cimg/python:3.10.9
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e pylint --recreate

  black:
    docker:
      - image: cimg/python:3.10.9
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e black --recreate


  mypy:
    docker:
      - image: cimg/python:3.10.9
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install Dependencies
          command: pip install --user tox

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Install Poetry Environment
          command: poetry --no-ansi install --no-root --sync

      - run:
          name: Run Tests
          command: poetry --no-ansi run tox -v -e mypy --recreate

  publish:
    docker:
      - image: cimg/python:3.10.9
    steps:
      - checkout

      - run:
          name: Generate _version.py
          command: python scripts/set_version.py

      - run:
          name: Set publish version
          command: poetry version $(git describe --tags --abbrev=0)

      - deploy:
          command: poetry publish -v -u $PYPI_USERNAME -p $PYPI_PASSWORD --build

workflows:
  version: 2
  build:
    jobs:
      - py38-pandas1:
          <<: *always-run
      - py38-pandas2:
          <<: *always-run
      - py39-pandas1:
          <<: *always-run
      - py39-pandas2:
          <<: *always-run
      - py310-pandas1:
          <<: *always-run
      - py310-pandas2:
          <<: *always-run
      - py311-pandas1:
          <<: *always-run
      - py311-pandas2:
          <<: *always-run
      - pylint:
          <<: *always-run
      - mypy:
          <<: *always-run
      - black:
          <<: *always-run
      - publish:
          requires:
            - py38-pandas1
            - py38-pandas2
            - py39-pandas1
            - py39-pandas2
            - py310-pandas1
            - py310-pandas2
            - py311-pandas1
            - py311-pandas2
            - pylint
            - mypy
            - black
          filters:
            tags: { only: '/^[0-9]+(\.[0-9]+)+(-[a-zA-Z]+[0-9]*)*$/' }
            branches: { ignore: /.*/ }
